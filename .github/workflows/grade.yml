name: grade
on:
  pull_request_target:
    branches: [ "main" ]
jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      tasks: ${{ steps.collect.outputs.tasks }}
      tasks_len: ${{ steps.collect.outputs.tasks_len }}
    steps:
      # 1Ô∏è‚É£ checkout the student code **with full history** so the base SHA exists
      - uses: actions/checkout@v4
        with:
          path: student
          ref:  ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0          # <-- important
          persist-credentials: false

      # 2Ô∏è‚É£ collect changed task folders
      - id: collect
        working-directory: student
        run: |
          # List class_X/task-NN-name dirs that have changes
          CHANGED=$(git diff --name-only \
                     ${{ github.event.pull_request.base.sha }} \
                     ${{ github.event.pull_request.head.sha }} |
                     awk -F/ '/^class_[0-9]+\/task-[0-9]+/ {print $1"/"$2}' | sort -u)

          # Turn into JSON array
          TASKS=$(echo "$CHANGED" | jq -R -s -c 'split("\n") - [""]')
          echo "tasks=$TASKS" >> $GITHUB_OUTPUT
          echo "tasks_len=$(echo "$TASKS" | jq 'length')" >> $GITHUB_OUTPUT
          echo "Detected task folders: $TASKS"

  grade:
    needs: detect
    if: ${{ needs.detect.outputs.tasks_len != '0' }}
    strategy:
      matrix:
        task: ${{ fromJSON(needs.detect.outputs.tasks) }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          path: student
          ref:  ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - uses: actions/checkout@v4
        with:
          repository: vitalwarley/ai-course-eval
          token: ${{ secrets.EVAL_REPO_PAT }}
          path: eval
      - run: |
          # Run setup.sh in student's task directory
          cd student/${{ matrix.task }}
          if [ -f setup.sh ]; then
            chmod +x setup.sh
            ./setup.sh
          fi
          cd ../..
          
          # Run setup.sh in eval's task directory
          cd eval/${{ matrix.task }}
          if [ -f setup.sh ]; then
            chmod +x setup.sh
            ./setup.sh
          fi
          cd ../..
      - run: |
          PYTHONPATH=.:$PYTHONPATH pytest -q eval/${{ matrix.task }} --json-report --json-report-file=report.json --timeout=90
      - name: Build comment body
        id: makebody
        run: |
          BODY=$(jq -r . report.json | sed 's/^/    /')   # indent JSON 4 spaces
          {
            echo "## üéØ Autograde Results: ${{ matrix.task }}"
            echo
            echo '```json'
            echo "$BODY"
            echo '```'
            echo
            echo "_Run: ${{ github.run_id }}_"
          } > body.txt
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat body.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post sticky comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "${{ matrix.task }}-grade-${{ github.run_id }}"
          message: "${{ steps.makebody.outputs.body }}"   # inline string, no file://

